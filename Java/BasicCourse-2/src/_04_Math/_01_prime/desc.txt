质数
    -- 试除法判定质数              时间复杂度：O(sqrt(n))
    -- 试除法分解质因数            时间复杂度：O(log(n)) ~ O(sqrt(n))之间
    -- 朴素筛法求素数              时间复杂度：O(n*log(log(n)))
    -- 线性筛法求素数              时间复杂度：O(n)



模板(C++)：
试除法判定质数
bool is_prime(int x)
{
    if (x < 2) return false;
    for (int i = 2; i <= x / i; i ++ )
        if (x % i == 0)
            return false;
    return true;
}



试除法分解质因数
void divide(int x)
{
    for (int i = 2; i <= x / i; i ++ )
        if (x % i == 0)  // 条件满足的话，i一定是质数
        {
            int s = 0;
            while (x % i == 0) x /= i, s ++ ;
            cout << i << ' ' << s << endl;
        }
    if (x > 1) cout << x << ' ' << 1 << endl;  // n最多有一个大于sqrt(n)的质因子
    cout << endl;
}


朴素筛法求素数
int primes[N], cnt;     // primes[]存储所有素数
bool st[N];         // st[x]存储x是否被筛掉，为true代表是合数

void get_primes(int n)
{
    for (int i = 2; i <= n; i ++ )
    {
        if (st[i]) continue;  // 只需要筛除质数的倍数即可
        primes[cnt ++ ] = i;
        for (int j = i + i; j <= n; j += i) st[j] = true;
    }
}


线性筛法求素数：核心：每个数只会被它的最小质因子筛掉
int primes[N], cnt;     // primes[]存储所有素数
bool st[N];         // st[x]存储x是否被筛掉

void get_primes(int n)
{
    for (int i = 2; i <= n; i ++ )
    {
        if (!st[i]) primes[cnt ++ ] = i;
        // 这里没必要写 j < cnt, 因为i如果为合数的话，枚举到i的最小质因子后一定会停下来
        // 因为i如果为质数的话，枚举到primes[j]后一定会停下来
        for (int j = 0; primes[j] <= n / i; j ++ )
        {
            st[primes[j] * i] = true;
            if (i % primes[j] == 0) break;
        }
    }
}
/**
 * (1) i % pj == 0 说明：pj是i的最小质因子，pj也是 pj*i的最小质因子
 * (2) i % pj != 0 说明：pj一定小于i的所有质因子，pj也是 pj*i的最小质因子
 * 另外：对于任意一个合数x，都会被筛掉：假设pj是x的最小质因子，当i枚举到
 *      x/pj 的时候，pj已经被枚举过，x会pj被筛掉
 * --> 因为每个合数都会被筛掉，而且每个数只会被它的最小质因子筛掉，因此每个数
 *     只会被筛一次，时间复杂度是O(n)的
 */




---------------------------------------------------------
对应练习：
AcWing 0866 试除法判定质数
AcWing 0867 分解质因数
AcWing 0868 筛质数

